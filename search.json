[
  {
    "objectID": "astronomy/logs/2022-12-26/index.html",
    "href": "astronomy/logs/2022-12-26/index.html",
    "title": "First Light",
    "section": "",
    "text": "I used my ST 80 for the first time! It was freezing out, so I wasn’t out too long. I set the telescope up at the front steps of my childhood home. I them moved the telescope onto the lawn to avoid a streetlight’s ray, and I eventually moved to the edge of the driveway for the same reason. I only looked at Jupiter, and could only successfully view Jupiter with the 25mm and 10mm lenses. My dad helped me set up the telescope mount in its altitude / azimuth configuration, and he helped find Jupiter with the 10mm lens. I don’t think we used the barlow lens with either eyepiece. When using the 3mm eyepiece, all we saw was dark. I think we were just not looking in the right place, but I’m still don’t fully understand why we didn’t see any stars with the 3mm eyepiece. It was a lot of fun! We ultimately saw Jupiter, and two of Jupiter’s moons laid out diagonally from Jupiter’s lower left to upper right. The moons were tiny, but very bright. I remember feeling extremely excited to use the telescope again."
  },
  {
    "objectID": "astronomy/logs/2022-12-26/index.html#summary",
    "href": "astronomy/logs/2022-12-26/index.html#summary",
    "title": "First Light",
    "section": "",
    "text": "I used my ST 80 for the first time! It was freezing out, so I wasn’t out too long. I set the telescope up at the front steps of my childhood home. I them moved the telescope onto the lawn to avoid a streetlight’s ray, and I eventually moved to the edge of the driveway for the same reason. I only looked at Jupiter, and could only successfully view Jupiter with the 25mm and 10mm lenses. My dad helped me set up the telescope mount in its altitude / azimuth configuration, and he helped find Jupiter with the 10mm lens. I don’t think we used the barlow lens with either eyepiece. When using the 3mm eyepiece, all we saw was dark. I think we were just not looking in the right place, but I’m still don’t fully understand why we didn’t see any stars with the 3mm eyepiece. It was a lot of fun! We ultimately saw Jupiter, and two of Jupiter’s moons laid out diagonally from Jupiter’s lower left to upper right. The moons were tiny, but very bright. I remember feeling extremely excited to use the telescope again."
  },
  {
    "objectID": "astronomy/logs/2022-12-26/index.html#conditions",
    "href": "astronomy/logs/2022-12-26/index.html#conditions",
    "title": "First Light",
    "section": "Conditions",
    "text": "Conditions\n\n\n\n\n\n\nI’ll clean this up and formalize the format later!\n\n\n\n\n\n\nCondition\nValue\n\n\n\n\nTemperature\n\\(20^\\circ\\) Fahrenheit\n\n\nLocation\nLawrence, NJ\n\n\nTime\n9 PM\n\n\nObjects\nJupiter, Two Moons of Jupiter"
  },
  {
    "objectID": "astronomy/logs/2023-01-14/index.html",
    "href": "astronomy/logs/2023-01-14/index.html",
    "title": "Mars at Buffalo Bayou",
    "section": "",
    "text": "Casey and I went to the park to try out the telescope together. We set up with a blanket in a field below the pavilion; it was a nice spot! We were able to find Mars (well, Casey was able to find Mars) and we used every eyepiece I have: 25mm, 10mm, and 3mm. We also used the Barlow Lens with the 3mm piece, which produced a very blurry (but large) view of Mars. It was very, very red. Cool!"
  },
  {
    "objectID": "astronomy/logs/2023-01-14/index.html#summary",
    "href": "astronomy/logs/2023-01-14/index.html#summary",
    "title": "Mars at Buffalo Bayou",
    "section": "",
    "text": "Casey and I went to the park to try out the telescope together. We set up with a blanket in a field below the pavilion; it was a nice spot! We were able to find Mars (well, Casey was able to find Mars) and we used every eyepiece I have: 25mm, 10mm, and 3mm. We also used the Barlow Lens with the 3mm piece, which produced a very blurry (but large) view of Mars. It was very, very red. Cool!"
  },
  {
    "objectID": "astronomy/logs/2023-01-14/index.html#conditions",
    "href": "astronomy/logs/2023-01-14/index.html#conditions",
    "title": "Mars at Buffalo Bayou",
    "section": "Conditions",
    "text": "Conditions\n\n\n\n\n\n\nI’ll clean this up and formalize the format later!\n\n\n\n\n\n\nCondition\nValue\n\n\n\n\nTemperature\n\\(50^\\circ\\) Fahrenheit\n\n\nLocation\nHouston, TX\n\n\nTime\n9 PM\n\n\nObjects\nMars"
  },
  {
    "objectID": "astronomy/logs/2023-02-04/index.html",
    "href": "astronomy/logs/2023-02-04/index.html",
    "title": "Stars at Brazos Bend",
    "section": "",
    "text": "I drove one hour south of Houston to Brazos Bend State Park. This park hosts the George Observatory, but I didn’t set up at the observatory. I drove around the back of the observatory to a parking lot next to a lake for fishing. The moon was one night short of the Snow Moon, and it was so bright it hurt to look at through the telescope. I looked at Orion’s Belt, Mairen’s Nebula below Orion, and Sirius."
  },
  {
    "objectID": "astronomy/logs/2023-02-04/index.html#summary",
    "href": "astronomy/logs/2023-02-04/index.html#summary",
    "title": "Stars at Brazos Bend",
    "section": "",
    "text": "I drove one hour south of Houston to Brazos Bend State Park. This park hosts the George Observatory, but I didn’t set up at the observatory. I drove around the back of the observatory to a parking lot next to a lake for fishing. The moon was one night short of the Snow Moon, and it was so bright it hurt to look at through the telescope. I looked at Orion’s Belt, Mairen’s Nebula below Orion, and Sirius."
  },
  {
    "objectID": "astronomy/logs/2023-02-04/index.html#conditions",
    "href": "astronomy/logs/2023-02-04/index.html#conditions",
    "title": "Stars at Brazos Bend",
    "section": "Conditions",
    "text": "Conditions\n\n\n\n\n\n\nI’ll clean this up and formalize the format later!\n\n\n\n\n\n\nCondition\nValue\n\n\n\n\nTemperature\n\\(50^\\circ\\) Fahrenheit\n\n\nLocation\nBrazos Bend State Park, TX\n\n\nTime\n9 PM\n\n\nObjects\nSirius, Orion’s Belt, Mairen’s Nebula"
  },
  {
    "objectID": "astronomy/index.html",
    "href": "astronomy/index.html",
    "title": "Night Sky Observations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\nFeb 4, 2023\n\n\nStars at Brazos Bend\n\n\nViewing stars and nebula at Brazos Bend State Park\n\n\n\n\nDec 26, 2022\n\n\nFirst Light\n\n\nFirst light with the Orion Short Tube (ST) 80 telescope!\n\n\n\n\nJan 14, 2022\n\n\nMars at Buffalo Bayou\n\n\nViewing Mars with Casey at Buffalo Bayou park.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "privacy/index.html",
    "href": "privacy/index.html",
    "title": "Privacy",
    "section": "",
    "text": "It is my hope that this website has no trackers at all one day. Right now, I believe I’m a bit short of that goal. Some of the math-formatting libraries, e.g. MathJax, use cookies which browsers label trackers. In addition, on my blog-related pages, I use a MailChimp widget to add a subscription field. That widget uses Javascript, and I believe there is a tracker embedded in that Javascript. MailChimp also shows warnings on their website about information they give to Meta (Facebook). Gross!\nI’m going to work to remove these trackers over time. This site will always be free. I think the home page and portfolio pages have no trackers at all! That’s motivating me to keep going with this goal.\nThank you Quarto for providing tracker-free website templates!"
  },
  {
    "objectID": "usage/index.html",
    "href": "usage/index.html",
    "title": "Terms of Use",
    "section": "",
    "text": "The following licenses apply to the source code for, and content on the domain loopy.software, as well as any aliases of loopy.software. These licenses do not apply to external links, and links to external projects. For example, the licenses described below do not apply to content served under non-alias subdomains of loopy.software, including docs.loopy.software. See the license terms for each external project individually.\n\n\nThe source code for this website, originally generated using Quarto project templates, is available for use under the terms of the MIT License. Put simply: feel free to use this website source code as a guide to help set up elements of your own website! Find the website source at: cadojo/loopy.software.\n\n\n\nThe written content of this website is available for use under the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0), unless otherwise stated. Put simply: feel free to share and use any content from this site, as long as you provide attribution! The license text is available in markup form on the Creative Commons website.\n\n\n\nThe code snippet content on this website, including snippets in blog posts, are available for use under the terms of the Unlicense unless otherwise specified. Put simply: all code snippets provided within the content of this website are in the public domain globally, to the extent allowable by law."
  },
  {
    "objectID": "usage/index.html#licenses",
    "href": "usage/index.html#licenses",
    "title": "Terms of Use",
    "section": "",
    "text": "The following licenses apply to the source code for, and content on the domain loopy.software, as well as any aliases of loopy.software. These licenses do not apply to external links, and links to external projects. For example, the licenses described below do not apply to content served under non-alias subdomains of loopy.software, including docs.loopy.software. See the license terms for each external project individually.\n\n\nThe source code for this website, originally generated using Quarto project templates, is available for use under the terms of the MIT License. Put simply: feel free to use this website source code as a guide to help set up elements of your own website! Find the website source at: cadojo/loopy.software.\n\n\n\nThe written content of this website is available for use under the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0), unless otherwise stated. Put simply: feel free to share and use any content from this site, as long as you provide attribution! The license text is available in markup form on the Creative Commons website.\n\n\n\nThe code snippet content on this website, including snippets in blog posts, are available for use under the terms of the Unlicense unless otherwise specified. Put simply: all code snippets provided within the content of this website are in the public domain globally, to the extent allowable by law."
  },
  {
    "objectID": "about/background/introduction/index.html",
    "href": "about/background/introduction/index.html",
    "title": "Introduction",
    "section": "",
    "text": "I grew up in New Jersey, and studied electrical and aerospace engineering in Maryland. I’m currently working as a Guidance, Navigation, & Controls engineer in Texas in support of human spaceflight and space exploration projects. I spend free time exploring nearby parks and trails, writing, and working on open-source software projects."
  },
  {
    "objectID": "about/background/introduction/index.html#technical-interests",
    "href": "about/background/introduction/index.html#technical-interests",
    "title": "Introduction",
    "section": "Technical Interests",
    "text": "Technical Interests\n\nScientific Software\nI’m very comfortable writing scientific software. I have developed software for space robotics projects as an undergraduate and graduate student (C++), and I’ve developed open-source astrodynamics and robotics analysis tools (Julia). I have recently started developing open source software with Python.\n\n\nAerospace Controls\nI emphasized applied controls and control theory throughout my undergraduate and graduate coursework. I’m familiar with applying linear analysis methods to nonlinear dynamical systems, and most of my graduate course projects related to studying nonlinear analysis methods. As a student, I primarily investigated region of attraction estimation methods, and coherent structure (manifold) dynamics near equilibrium points. I studied flight dynamics relating to atmospheric vehicles, and spacecraft. I found a love for astrodynamics towards the end of my academic career!\n\n\nScientific Communication\nI will be honing my scientific communication skills over the next few years by writing open source notes — and blog posts — about technical topics of interest. This process will contribute the growing list of free educational resources, and will help me to grow as a technical communicator. I’ve found that writing (and coding) technical concepts really helps me to solidify my own knowledge. I aspire to produce content in forms similar to MIT’s excellent Computational Thinking series!"
  },
  {
    "objectID": "about/background/education/index.html",
    "href": "about/background/education/index.html",
    "title": "Education",
    "section": "",
    "text": "I studied electrical engineering at the University of Maryland from fall 2014 to spring 2021. I took a break from classes to work as an engineering intern at NASA during my fourth year. I graduated with an emphasis in controls; my senior year included several undergraduate courses related to control theory and applied controls.\nIn spare time during semesters and academic breaks, I worked as an undergraduate research assistant at the University of Maryland’s Space Systems Lab. I primarily developed software to operate and control the lab’s robotic manipulators. I enjoyed earning my open-water (scuba) certification to help with the lab’s neutral buoyancy research!\n\n\n\nI began my M.S. degree in the fall immediately following my undergraduate graduation, and completed my M.S. degree in May 2021. My academic focus was Space Systems, though I also took a substantial number of courses relating to control theory and flight control. I worked as the Space Systems Lab lead software developer in my second year of graduate school. I developed the lab’s kinematics and manipulator control interfaces using C++ and the Robot Operating System."
  },
  {
    "objectID": "about/background/education/index.html#degrees",
    "href": "about/background/education/index.html#degrees",
    "title": "Education",
    "section": "",
    "text": "I studied electrical engineering at the University of Maryland from fall 2014 to spring 2021. I took a break from classes to work as an engineering intern at NASA during my fourth year. I graduated with an emphasis in controls; my senior year included several undergraduate courses related to control theory and applied controls.\nIn spare time during semesters and academic breaks, I worked as an undergraduate research assistant at the University of Maryland’s Space Systems Lab. I primarily developed software to operate and control the lab’s robotic manipulators. I enjoyed earning my open-water (scuba) certification to help with the lab’s neutral buoyancy research!\n\n\n\nI began my M.S. degree in the fall immediately following my undergraduate graduation, and completed my M.S. degree in May 2021. My academic focus was Space Systems, though I also took a substantial number of courses relating to control theory and flight control. I worked as the Space Systems Lab lead software developer in my second year of graduate school. I developed the lab’s kinematics and manipulator control interfaces using C++ and the Robot Operating System."
  },
  {
    "objectID": "about/background/education/index.html#internships",
    "href": "about/background/education/index.html#internships",
    "title": "Education",
    "section": "Internships",
    "text": "Internships\n\nNASA JSC\nI worked as an intern at NASA’s Johnson Space Center continuously from fall 2017 through summer 2018, and every summer following through 2020. I had the pleasure of exploring several roles, including as an avionics engineer and as a flight operations support engineer. I then worked four internships with an aerospace controls group, and solidified my love for developing flight software and analysis software.\n\n\nHarris Corporation\nI worked as a radio-frequency engineer for Harris Corporation in the summer of 2016. I independently wrote automation software using Visual Basic to complete a 20-hour data organization task in less than two minutes. I worked with another intern to implement an ITU rain attenuation model using MATLAB and C#.\n\n\nSRI International\nIn the summer of 2015 I helped to annotate data for machine learning engineers. I also worked with another intern to develop a near-infrared LED array circuit board for gaze tracking applications."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "about(loopy.software)",
    "section": "",
    "text": "This section of the website serves as my professional portfolio. Most of the content relates to my open source software development work, and public presentations I’ve given. You can find my professional resume at loopy.software/about/resume.pdf. Otherwise, head to my Background page for more general information about me!"
  },
  {
    "objectID": "about/software/miscellaneous/index.html",
    "href": "about/software/miscellaneous/index.html",
    "title": "Miscellaneous Software",
    "section": "",
    "text": "This is a super opinionated project! The gist is this — what if we cleaned up every unneccessary name from a Python module once it’s fully loaded? By using the pattern below, all of your namespaces will be kept clean and tidy.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    for _ in (*locals(), \"_\"):\n        if not _.startswith(\"__\") and _ not in __export__:\n            del locals()[_]\nI put the above pattern in a package called module-hygiene! With this new package, you could rewrite module.py as follows.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    from hygiene import cleanup\n    exec(cleanup())\n\n\n\nThe rich Python package is excellent! I’ve added Julia-style in-terminal Markdown admonitions via the rich-admonitions package! Check out some simple usage below.\n\nfrom rich import print\nfrom admonitions import Admonition\n\nmessage = Admonition.note(\n    Admonition.info(\n        Admonition.warning(\n            Admonition.danger(\n                Admonition(\"We're in too deep! 🥽\", header=\"Oh jeez...\", style=\"purple\")\n            )\n        )\n    )\n)\n\nprint(message)\n\n│ Note  \n│\n│  │ Info                                                                                                        \n│  │                                                                                                             \n│  │  │ Warning                                                                                                  \n│  │  │                                                                                                          \n│  │  │  │ Danger                                                                                                \n│  │  │  │                                                                                                       \n│  │  │  │  │ Oh jeez...                                                                                         \n│  │  │  │  │                                                                                                    \n│  │  │  │  │  We're in too deep! 🥽                                                                             \n│  │  │  │                                                                                                       \n│  │  │                                                                                                          \n│  │                                                                                                             \n│                                                                                                                \n\n\n\n\n\n\n\nDid you know that you can use context managers to provide “block scoping” in Python? Check out block-scopes on Python’s public package index, PyPI!\n\nfrom scopes import only\n\nx = 5\n\nwith only(\"y\"):\n    y = 6\n    z = 7\n\nprint(f\"{x=}\")\nprint(f\"{y=}\")\n\ntry:\n    print(f\"{z=}\")\nexcept NameError:\n    print(\"The variable `z` is not in scope!\")\n\nx=5\n\n\n\ny=6\n\n\n\nThe variable `z` is not in scope!"
  },
  {
    "objectID": "about/software/miscellaneous/index.html#python",
    "href": "about/software/miscellaneous/index.html#python",
    "title": "Miscellaneous Software",
    "section": "",
    "text": "This is a super opinionated project! The gist is this — what if we cleaned up every unneccessary name from a Python module once it’s fully loaded? By using the pattern below, all of your namespaces will be kept clean and tidy.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    for _ in (*locals(), \"_\"):\n        if not _.startswith(\"__\") and _ not in __export__:\n            del locals()[_]\nI put the above pattern in a package called module-hygiene! With this new package, you could rewrite module.py as follows.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    from hygiene import cleanup\n    exec(cleanup())\n\n\n\nThe rich Python package is excellent! I’ve added Julia-style in-terminal Markdown admonitions via the rich-admonitions package! Check out some simple usage below.\n\nfrom rich import print\nfrom admonitions import Admonition\n\nmessage = Admonition.note(\n    Admonition.info(\n        Admonition.warning(\n            Admonition.danger(\n                Admonition(\"We're in too deep! 🥽\", header=\"Oh jeez...\", style=\"purple\")\n            )\n        )\n    )\n)\n\nprint(message)\n\n│ Note  \n│\n│  │ Info                                                                                                        \n│  │                                                                                                             \n│  │  │ Warning                                                                                                  \n│  │  │                                                                                                          \n│  │  │  │ Danger                                                                                                \n│  │  │  │                                                                                                       \n│  │  │  │  │ Oh jeez...                                                                                         \n│  │  │  │  │                                                                                                    \n│  │  │  │  │  We're in too deep! 🥽                                                                             \n│  │  │  │                                                                                                       \n│  │  │                                                                                                          \n│  │                                                                                                             \n│                                                                                                                \n\n\n\n\n\n\n\nDid you know that you can use context managers to provide “block scoping” in Python? Check out block-scopes on Python’s public package index, PyPI!\n\nfrom scopes import only\n\nx = 5\n\nwith only(\"y\"):\n    y = 6\n    z = 7\n\nprint(f\"{x=}\")\nprint(f\"{y=}\")\n\ntry:\n    print(f\"{z=}\")\nexcept NameError:\n    print(\"The variable `z` is not in scope!\")\n\nx=5\n\n\n\ny=6\n\n\n\nThe variable `z` is not in scope!"
  },
  {
    "objectID": "about/software/scientific/index.html",
    "href": "about/software/scientific/index.html",
    "title": "Scientific Software",
    "section": "",
    "text": "I developed a Julia package alongside my graduate astrodynamics courses, and I’ve registered this package in Julia’s package registry! Right now, the package provides calculations relating to conic orbits, and circular-restricted three-body orbits. I’m most proud of the package’s Halo orbit and manifold solvers! At my highest aspiration, this package will one day serve a purpose similar to Python’s excellent poliastro.\n\n\n\nCommon astrodynamical models are provided in another open-source Julia package I’ve written: AstrodynamicalModels.jl. This package currently includes restricted two-body, n-body, and circular restricted three-body spacecraft dynamics. The package extends the excellent ModelingToolkit.jl; check that out if you’re not familiar! Playing around with the symbolic-numeric “bridge” that ModelingToolkit provides helped me to re-learn some basic dynamics concepts (e.g. “oh yeah, the hessian of the potential energy equation is equivalent to the Jacobian of the system’s equations of motion!”) Documentation is available here!\n\n\n\nWhile this project is not yet open-source, it soon will be! I wrote this Julia package as a graduate student. It provides symbolic code generation for manipulator kinematics. To get this to work, I ended up reworking some simple C++, MATLAB, and Stan code generation capabilities in Symbolics.jl!\n\n\n\nThis project is an unofficial implementation of publicly available polynomial approximations for NASA’s Generic Transport Model aircraft. Check out this package if you want a sandbox dynamical model for a control theory project! I’m using this package as an example for a control theory note-set I’m writing.\n\n\n\nThis project wraps the JPL Horizons REST API word-for-word! You can use this to do anything the Horizons API allows; request planetary ephemeris, download close approach tables, and more.\n\n\n\nThis projects wraps the word-for-word wrapper — HorizonsAPI.jl — with a simpler interface. It’s also currently more limited! This package currently only supports downloading Cartesian ephemeris. The ephemeris function returns CSV-formatted position and velocity data for any solar system body supported by JPL Horizons; the returned type supports the Tables.jl interface, so you can pass it right on to the DataFrame and related constructors without issue!\n\n\n\nThis is yet unreleased, but I’m excited about it! I’m trying to train surrogate models on planetary ephemeris data, so you don’t need to download ephemeris at all for casual applications. Fingers crossed it works!"
  },
  {
    "objectID": "about/software/scientific/index.html#julia",
    "href": "about/software/scientific/index.html#julia",
    "title": "Scientific Software",
    "section": "",
    "text": "I developed a Julia package alongside my graduate astrodynamics courses, and I’ve registered this package in Julia’s package registry! Right now, the package provides calculations relating to conic orbits, and circular-restricted three-body orbits. I’m most proud of the package’s Halo orbit and manifold solvers! At my highest aspiration, this package will one day serve a purpose similar to Python’s excellent poliastro.\n\n\n\nCommon astrodynamical models are provided in another open-source Julia package I’ve written: AstrodynamicalModels.jl. This package currently includes restricted two-body, n-body, and circular restricted three-body spacecraft dynamics. The package extends the excellent ModelingToolkit.jl; check that out if you’re not familiar! Playing around with the symbolic-numeric “bridge” that ModelingToolkit provides helped me to re-learn some basic dynamics concepts (e.g. “oh yeah, the hessian of the potential energy equation is equivalent to the Jacobian of the system’s equations of motion!”) Documentation is available here!\n\n\n\nWhile this project is not yet open-source, it soon will be! I wrote this Julia package as a graduate student. It provides symbolic code generation for manipulator kinematics. To get this to work, I ended up reworking some simple C++, MATLAB, and Stan code generation capabilities in Symbolics.jl!\n\n\n\nThis project is an unofficial implementation of publicly available polynomial approximations for NASA’s Generic Transport Model aircraft. Check out this package if you want a sandbox dynamical model for a control theory project! I’m using this package as an example for a control theory note-set I’m writing.\n\n\n\nThis project wraps the JPL Horizons REST API word-for-word! You can use this to do anything the Horizons API allows; request planetary ephemeris, download close approach tables, and more.\n\n\n\nThis projects wraps the word-for-word wrapper — HorizonsAPI.jl — with a simpler interface. It’s also currently more limited! This package currently only supports downloading Cartesian ephemeris. The ephemeris function returns CSV-formatted position and velocity data for any solar system body supported by JPL Horizons; the returned type supports the Tables.jl interface, so you can pass it right on to the DataFrame and related constructors without issue!\n\n\n\nThis is yet unreleased, but I’m excited about it! I’m trying to train surrogate models on planetary ephemeris data, so you don’t need to download ephemeris at all for casual applications. Fingers crossed it works!"
  },
  {
    "objectID": "about/communication/publications/index.html",
    "href": "about/communication/publications/index.html",
    "title": "Publications",
    "section": "",
    "text": "I replicated nonlinear region of attraction analysis completed by Chakraborty et al for a graduate nonlinear controls course project. While the estimation methods were not replicated, the polynomial approximation was replicated with Python, and the results were summarized in a technical paper. The polynomial dynamics have since been ported to Julia with PolynomialGTM.jl.\n\n\n\nI investigated low-cost manifold-based interplanetary transfer designs as part of a graduate astrodynamics course project. The results were summarized in a final paper. This investigation is ongoing! I’m expecting to produce a follow up paper with calculation corrections, and new results, in 2022. As part of this project, a list of thousands of initial conditions for periodic orbits in our solar system was published on GitHub!"
  },
  {
    "objectID": "about/communication/publications/index.html#self-published",
    "href": "about/communication/publications/index.html#self-published",
    "title": "Publications",
    "section": "",
    "text": "I replicated nonlinear region of attraction analysis completed by Chakraborty et al for a graduate nonlinear controls course project. While the estimation methods were not replicated, the polynomial approximation was replicated with Python, and the results were summarized in a technical paper. The polynomial dynamics have since been ported to Julia with PolynomialGTM.jl.\n\n\n\nI investigated low-cost manifold-based interplanetary transfer designs as part of a graduate astrodynamics course project. The results were summarized in a final paper. This investigation is ongoing! I’m expecting to produce a follow up paper with calculation corrections, and new results, in 2022. As part of this project, a list of thousands of initial conditions for periodic orbits in our solar system was published on GitHub!"
  },
  {
    "objectID": "about/communication/presentations/index.html",
    "href": "about/communication/presentations/index.html",
    "title": "Presentations",
    "section": "",
    "text": "In January 2022, I presented an Introduction to Julia. I talked about how computers work — from binary math, to computer chips, to keyboard inputs. At the end of the presentation, we explored bundles of orbits in outer space with Julia code!"
  },
  {
    "objectID": "about/communication/presentations/index.html#jsc-hackathon",
    "href": "about/communication/presentations/index.html#jsc-hackathon",
    "title": "Presentations",
    "section": "",
    "text": "In January 2022, I presented an Introduction to Julia. I talked about how computers work — from binary math, to computer chips, to keyboard inputs. At the end of the presentation, we explored bundles of orbits in outer space with Julia code!"
  },
  {
    "objectID": "about/communication/presentations/index.html#juliacon",
    "href": "about/communication/presentations/index.html#juliacon",
    "title": "Presentations",
    "section": "2021 JuliaCon",
    "text": "2021 JuliaCon\nAs a graduate student, I developed an open-source astrodynamics package called GeneralAstrodynamics.jl. I used this package to investigate invariant-manifold-based Earth-Jupiter transfer designs. This JuliaCon talk provides a brief introduction to astrodynamics, scientific computing, and Julia. The presentation slides and Pluto notebook are available on GitHub."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joe(y) Carpinelli",
    "section": "",
    "text": "Earth is the only planet with rainbows!\n\n\n\n\n\n \n  \n   \n  \n    \n     GitHub\n  \n  \n    \n     Twitter\n  \n  \n    \n     Email"
  },
  {
    "objectID": "blog/posts/introduction-to-dynamics/index.html",
    "href": "blog/posts/introduction-to-dynamics/index.html",
    "title": "Introduction to Dynamics",
    "section": "",
    "text": "Offprint\n\n\n\nThis is a section from a control theory note-set I’m writing, Exploring Control Theory. It won’t be done for years! Over time, I’ll add chapters to the open-source repository, https://github.com/cadojo/controls. Some chapters that stand on their own will be added as blog posts here!"
  },
  {
    "objectID": "blog/posts/introduction-to-dynamics/index.html#overview",
    "href": "blog/posts/introduction-to-dynamics/index.html#overview",
    "title": "Introduction to Dynamics",
    "section": "Overview",
    "text": "Overview\nOur end goal as controls engineers is to affect a system in some desired way. To do this, we’ll need a mathematical description of our system. This mathematical description is known as a model. There’s a famous quote about mathematical models: “all models are wrong, but some are useful”.\nThis is really important. We are always approximating our system by describing it with a model. The question we need to ask is “is our approximate description of our system (our model) good enough?”\n\n\n\n\n\n\nDefinitions\n\n\n\n\nModel: a mathematical description of a system\n\n\n\nBut what does this model look like? To answer this question, let’s first discuss system dynamics, and equations of motion."
  },
  {
    "objectID": "blog/posts/introduction-to-dynamics/index.html#dynamics",
    "href": "blog/posts/introduction-to-dynamics/index.html#dynamics",
    "title": "Introduction to Dynamics",
    "section": "Dynamics",
    "text": "Dynamics\nIf we want to affect a system, then by definition, the system should be affect-able (is that a word?) by external forces. These “forces” don’t necessarily need to be physical forces: consider the affect of introducing new predators in an ecosystem with the goal of affecting predator-prey populations.\nSo we have a mathematical description, and we know we’ll need some changing parameter to affect the mathematical description. Sounds like we need equations! The equations that govern our system are often called equations of motion. Any system that changes due to some external “force” is known as a dynamical system by definition.\nThe first step to any controls problem is identifying the dynamics; this usually means defining the equations of motion for our system. A set of equations of motion which describe our dynamical system is our model."
  },
  {
    "objectID": "blog/posts/introduction-to-dynamics/index.html#example",
    "href": "blog/posts/introduction-to-dynamics/index.html#example",
    "title": "Introduction to Dynamics",
    "section": "Example",
    "text": "Example\nA really common system in engineering is known as the spring-mass-damper. We can roughly describe this system as a block on a table, which is connected to a spring. We can force (a.k.a. affect) this system by pulling on the block to extend or compress the spring.\n\nModel Construction\nLet’s figure out our equations of motion. The following question is usually a useful starting point: “what are the forces on our system?” We know we’ll have one external force: us pulling or pushing on the block! Let’s call this external force \\(f_e\\). We’ll also have a force due to the spring, and a force due to the friction between the block and the table. The force due to the spring will be proportional to the position of the block with respect to the spring’s neutral position: let’s call the spring constant \\(k\\). The force due to friction will be proportional to the velocity of the block (let’s forget about static friction for now): let’s call the coefficient of friction \\(d\\).\nWith all of the forces identified, we can start constructing the eqautions of motion for this system. If we call our block’s position \\(x\\), then the acceleration \\(\\ddot{x}\\) will be equal to the sum of our external force \\(f_e\\), the spring force \\(k x\\), and the force due to friction \\(d \\dot{x}\\). Summing these forces produces the following (common) spring-mass-damper equation, where \\(m\\) is the mass of the block.\n\\[\nf_e = m \\ddot{x} + d \\dot{x} + k x\n\\tag{1}\\]\nWe have our model! This is a second-order differential equation (Equation 1). It helps to divide all variables into two groups: parameters, and states. States describe the system at some point in time. In this case, state variables answer the following questions: “where is the block, what is the velocity of the block, and what is the acceleration of the block?” One set of valid state variables for this system is \\(x\\) and \\(\\dot{x}\\); we don’t need to include \\(\\ddot{x}\\) in our list of state variables because we can calculate \\(\\ddot{x}\\) from \\(x\\) and \\(\\dot{x}\\).\n\n\n\n\n\n\nNote\n\n\n\nWe say “one set of state variables” because there may (and nearly always are) other valid state representations that could completely describe this system! State variables are not unique.\n\n\nIf we leave states as symbolic, and then look to the equation(s) of motion of a system, the parameters describe a specific instance of a system. Put another way, no matter what values \\(f_e\\), \\(d\\), and \\(k\\) take, this equation of motion is identifiable as a spring-mass-damper. For this reason, we can specify \\(f_e\\), \\(d\\), and \\(k\\) as parameters. We can assume a unit mass for the block for now.\n\n\n\n\n\n\nNote\n\n\n\nThe parameter \\(f_e\\) is our control parameter in this example, because we can change \\(f_e\\) to affect our system. For now, let’s not differentiate between control parameters and non-control parameters.\n\n\n\n\nCoding our Model\nWe can simulate these dynamics with Julia’s DifferentialEquations package. If you’re familiar with MATLAB, DifferentialEquations provides numerical integration solvers that are similar to MATLAB’s ode45 (and similar) solvers. We can use the ModelingToolkit package to conveniently put our model to code, and interface with DifferentialEquations for simulation.\n\n\nCode\nusing ModelingToolkit, DifferentialEquations, Plots\n\n\nNow that we have access to ModelingToolkit, let’s build the model!\n\n\nCode\n@parameters t fₑ d k\n@variables x(t) ẋ(t)\nδ = Differential(t)\n\neqs = [\n    δ(x) ~ ẋ,\n    δ(ẋ)~ - d*ẋ - k*x + fₑ\n]\n\nmodel = ODESystem(eqs, t, [x, ẋ], [fₑ, d, k]; name = :HarmonicOscillator)\n\n\n\\[ \\begin{align}\n\\frac{\\mathrm{d} x\\left( t \\right)}{\\mathrm{d}t} =& \\textnormal{\\.{x}}\\left( t \\right) \\\\\n\\frac{\\mathrm{d} \\textnormal{\\.{x}}\\left( t \\right)}{\\mathrm{d}t} =& f_e - d \\textnormal{\\.{x}}\\left( t \\right) - k x\\left( t \\right)\n\\end{align}\n\\]\n\n\n\n\nSimulating our Model\nWith model defined above, we can use DifferentialEquations to simulate our system. Of course, to do this we’ll need to specify numerical values for our parameters, and initial conditions (the simulation starting point) for our state variables. The code below specifies some arbitrary initial conditions and constant parameter values, and simulates the resulting dynamics.\n\n\nCode\nproblem = let x₀ = 0.1, ẋ₀ = 0.0, dₙ = 0.5, kₙ = 0.9, fₙ = 1.0, Δt = 30.0\n    ODEProblem(\n        model,\n        [x =&gt; x₀, ẋ =&gt; ẋ₀],\n        (0.0, Δt),\n        [d =&gt; dₙ, k =&gt; kₙ, fₑ =&gt; fₙ]\n    )\nend\n\nsolutions = solve(problem, Tsit5(); reltol = 1e-12, abstol = 1e-12)\nplot(solutions; linewidth = 2, dpi = 130, title = \"Spring Mass Damper Simulation\")"
  },
  {
    "objectID": "blog/posts/wrongful-partisanship/index.html",
    "href": "blog/posts/wrongful-partisanship/index.html",
    "title": "Wrongful Partisanship",
    "section": "",
    "text": "This article is my opinion and response to HPD action at the Harris County Commissioners Court on October 11th, 2022. See Jen Rice’s article outlining the timing of events. Banner image credits to Jen Rice and the Houston Chronicle.\n\n\n\nResources paid for by taxpayers should not be used as props for a partisan political stunt. The Houston Police Department (HPD) actions taken at the Harris County Commissioners Court on October 11th were wrong. Harris County taxpayers deserve to know how this event was planned, and the organizers and attendees within HPD who used government resources for partisan political gain should be held accountable.\nThe line between personal and professional actions may sometimes appear thin. For governments, extra care must be taken to prevent even the appearance of impropriety. As a result, government employees have more to consider when planning political action, relative to other Americans. If an employee of the Federal Bureau of Investigation wears an FBI baseball cap while they attend a political rally in a personal capacity, might they appear to be representing the agency? If Environmental Protection Agency employees use their government email accounts to organize a sit-in on the steps of the Supreme Court in protest of decisions relating to climate change, are they violating federal regulations? In my understanding, the answer to both of these questions is: yes.\nThe laws and regulations which relate to the previous two examples are not superfluous. They help us — as a nation — walk that line between protecting the autonomy and rights of individuals, and trusting the institutions we’ve assiged with running our society. The spirit behind these guardrails is important. These rules protect you from the government. This is what it means to live in a country of laws. I am proud to live in a place which takes care to protect the independence of the institutions assigned with service to the public.\nThe actions taken by HPD officers at the Harris County Commissioner Court on October 11th were not nuanced, or anywhere close to the “ethical line”. Officers in official uniforms brought K-9 units and weapons into the halls of the Commissioner Court. They boo’d the commissioners as the meeting adjourned. They posed for a picture with a banner that read: STOP DEFUNDING.\nTo me, the implicit intimidation on display by HPD officers against elected officials is chilling, and the political action predicated on a falsehood — the falsehood that Harris County officials have proposed defunding law enforcement — is cynical and condescending toward all voters. That latter point is, to me, worsened by the fact that the officers have to know that their funding is not in jeopardy; this necessarily means their actions at the Court were in furtherance of a politically expedient lie. Still, I understand that for Houston residents who are wary of national calls to re-allocate police funding, the rule-bending by HPD at the Court may feel like a small price to pay for a dramatic and public display of support for law enforcement funding. To those readers, I say this: no matter the issue, we cannot allow publicly funded apolitical institutions to participate in partisan politics. To let HPD off the hook for their misuse of taxpayer dollars is to fail to provide the guardrails necessary for all Americans to have faith in the institutions sworn to their service."
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html",
    "href": "blog/posts/python-module-hygiene/index.html",
    "title": "Module Hygiene in Python",
    "section": "",
    "text": "This is gonna get pretty opinionated! I want to say this upfront: I’m no Python expert. If I got something wrong, please leave a comment, send an email, or otherwise let me know!"
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#python-namespaces",
    "href": "blog/posts/python-module-hygiene/index.html#python-namespaces",
    "title": "Module Hygiene in Python",
    "section": "Python Namespaces",
    "text": "Python Namespaces\nAsk yourself the following question: where in a Python program can you store variables which are distinct from the rest of your program? As you think of answers to this question, you can loosely think about anything in Python which is dot-accessible, e.g. &lt;something&gt;.attribute; in this example, &lt;something&gt; is functioning as a namespace.\n\n\n\n\n\n\nDefinition: namespace\n\n\n\nIn computer programming, a namespace refers to some element of a program which separates named variables from the rest of the program.\n\n\nThere are plenty of examples of namespaces in Python: modules, classes, class instances, etc. In fact, all of those examples are object instances in Python! Each assertion made in the code below evaluates to True.\n\n\nCode\n# Modules are objects!\nassert isinstance(__builtins__, object) \n\n# Classes are objects!\nassert isinstance(int, object)\n\n# Class instances are objects!\nassert isinstance(int(0), object)\n\n\nFor the remainder of this post, let’s focus on Python modules specifically. We can and should do more to make Python modules sparse!"
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#python-modules",
    "href": "blog/posts/python-module-hygiene/index.html#python-modules",
    "title": "Module Hygiene in Python",
    "section": "Python Modules",
    "text": "Python Modules\n\n\n\n\n\n\nDefinition: module\n\n\n\nIn computer programming, modules are explicit namespace declarations which provide separate compartments in your program where variable names are distinct. A new variable declared in one module is different than a new variable declared in another module, even if those variables have the same name!\n\n\nIn Python, modules are defined by .py files. There’s no easily supported way to create modules dynamically, though that would make for a nice future post! You need to write your module’s contents to a .py file, make that file available on sys.path, and then load that module, i.e. with an import statement. The sys.path variable is where Python will look for the name something when you type import something. You can check this path yourself! Try import sys; print(sys.path) sometime."
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#two-categories-of-dependencies",
    "href": "blog/posts/python-module-hygiene/index.html#two-categories-of-dependencies",
    "title": "Module Hygiene in Python",
    "section": "Two Categories of Dependencies",
    "text": "Two Categories of Dependencies\nI’d like to define two terms before we continue: import-time, and usage-time. Import-time refers to the moment when a module is first loaded; the module is executed just as if you pasted each line into a Python interpreter. Usage-time refers to all subsequent usage of a Python module.\nimport numpy # import time\nprint(numpy.abs(-1)) # usage time\nThis distinction will be important for the module hygiene recipe described later! Python developers commonly load import-time and usage-time dependencies at the top of their modules. If you instead separate import-time and usage-time dependencies, you can safely remove all import-time dependencies from your module’s namespace!"
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#module-example-coordinates.py",
    "href": "blog/posts/python-module-hygiene/index.html#module-example-coordinates.py",
    "title": "Module Hygiene in Python",
    "section": "Module Example: coordinates.py",
    "text": "Module Example: coordinates.py\nLet’s pretend the code block below is placed in a file called coordinates.py. If this file is in a directory found in sys.path, then you have access to a module titled coordinates! Everything defined in coordinates.py will be available to you, even variables defined with leading underscores.\nIn your new module, coordinates, we’ll bring in some math functions from numpy, define a public-facing function for users of our module, and define some temporarily necessary variables. As you read through, try to find the variables which are only temporarily necessary!\n\n\n\n\n\n\nHint\n\n\n\nOnce the full module is loaded, do we really need any of the typing variables anymore?\n\n\n\n\nCode\n\"\"\"\nPretend this is the contents of a new Python module, \n\"coordinates.py\". This module provides common coordinate \ntransformations for you!\n\"\"\"\n\n\n#\n# First, let's define some types to help us \n# write declaritive & modern Python code!\n#\n\nReal = int | float \nfrom typing import NamedTuple\n\n\n#\n# We'll also need some math functions from numpy. \n# We could use Python's built-in `abs`, `sqrt`, \n# `sin`, and `cos` functions, but numpy's versions \n# will have better performance.\n#\n\nfrom numpy import arctan2 as atan2, sqrt, cos, sin\n\n\n#\n# Finally, my favorite Python package: plum-dispatch. \n# It provides Julia-like type dispatching to Python! \n# Of course, you take a performance hit, but look at \n# how clean the code below is! 🤩\n#\n\nfrom plum import dispatch\n\n\n#\n# Now that we have the setup out of the way, let's \n# add some functionality!\n#\n\nclass Rectangular(NamedTuple):\n    \"\"\"\n    Defines a two-dimensional rectangular coordinate.\n    \"\"\"\n    x: Real\n    y: Real\n\nclass Polar(NamedTuple):\n    \"\"\"\n    Defines a two-dimensional polar coordinate.\n    \"\"\"\n    r: Real\n    θ: Real\n\n@dispatch\ndef rectangular(coordinate: Rectangular) -&gt; Rectangular:\n    return coordinate\n\n@dispatch\ndef rectangular(coordinate: Polar) -&gt; Rectangular:\n    return Rectangular(\n        x = coordinate.r * cos(coordinate.θ),\n        y = coordinate.r * sin(coordinate.θ),\n    )\n\n@dispatch\ndef polar(coordinate: Rectangular) -&gt; Polar:\n    return Polar(\n        r = sqrt(coordinate.x**2 + coordinate.y**2),\n        θ = atan2(-coordinate.y, coordinate.x),\n    )\n\n@dispatch\ndef polar(coordinate: Polar) -&gt; Polar:\n    return coordinate\n\n\nNow if you load coordinates.py using import coordinates, and then you inspect the contents of the module, what will you find? You’ll certaintly find names which are the purpose of the package, such as the Rectangular and Polar, and the rectangular and polar methods. Unfortunately, you’ll also find a lot of names you aren’t intended to use: Real, NamedTuple, atan2, sqrt, cos, sin, and dispatch.\nMost Python developers just ignore all of those names, and that is absolutely fine. Personally, as I write Python code, these extra names irk me a bit; why am I providing names which I never intend for my users to use?"
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#module-cleanup-recipe",
    "href": "blog/posts/python-module-hygiene/index.html#module-cleanup-recipe",
    "title": "Module Hygiene in Python",
    "section": "Module Cleanup Recipe",
    "text": "Module Cleanup Recipe\nWe can get rid of the extraneous names in our modules by simply calling del on each unwanted name at the end of our module files. If this pattern is used, users will be able to programatically check for your public API by reading the contents of yourmodule.__export__, and IDE tab-completion won’t show any private names.\nThis pattern comes in three steps: define names which you intend to keep, write the primary contents of your module, and delete all unwanted names at the end of your module. There’s one additional concept you’ll need to keep in mind: you can no longer follow the common Python practice of importing usage-time dependencies at the top-level of your module! Instead, you can do so at the beginning of each function definition.\nSound weird? Fear not! The rest of this post walks through this pattern in detail, and provides a bit more information which can help you determine if this pattern is useful for you.\n\nDefine Exported Names\nRust specifies elements of a public API by using the keyword pub. Julia specifies exported names with the keyword export. Python can provide the means to accomplish (practically) the same thing! (Let’s decide to define an __export__variable in all of our Python modules.) This __export__ variable should be some kind str collection, like a list, tuple, set, or any other Iterable type. Personally, I like using the set type because it feels most in keeping with the spirit of an exported names collection; names can’t be repeated, and order doesn’t matter!This rule also applies to packages and subpackages because they are also Python modules!\n__export__ = {\n    \"Rectangular\", \"Polar\",\n    \"rectangular\", \"polar\",\n}\n\n\nImport Temporary Names\nWith this __export__ collection defined, we can safely include any temporary names we want, just as we normally would. This commonly includes types defined in the built-in typing package. Import all of the temporary functionality you need, and don’t worry about polluting your module’s namespace; we’ll clean up this namespace soon!\nReal = int | float\nfrom typing import NamedTuple\nfrom plum import dispatch\n\n\nImplement the Public API\nYou have the temporary names you need to add proper typing and import-time functionality to your public API. Let’s actually write the API! This is equivalent to all of your exported names, as declared above in __export__.\nNote that, so far, we have only imported the import-time dependencies. We can’t import our usage-time dependencies in our module without adding them to __export__; otherwise, our module will throw a NameError as it attempts to reference previously deleted names!\nFor example, if we write from numpy import sin, cos in our top-level module, and then delete sin and cos at the end of the module, all code which relies on sin and cos at usage-time will be calling undefined functions! Rather than throw all of our usage-time dependencies into __export__, we can simply add them to our function definitions. If you’re worried that those imports will be loaded every time you call the function, don’t! Each import statement within a function is only evaluated the first time you call the function.\n\n\nCode\nclass Rectangular(NamedTuple):\n    \"\"\"\n    Defines a two-dimensional rectangular coordinate.\n    \"\"\"\n    x: Real\n    y: Real\n\nclass Polar(NamedTuple):\n    \"\"\"\n    Defines a two-dimensional polar coordinate.\n    \"\"\"\n    r: Real\n    θ: Real\n\n@dispatch\ndef rectangular(coordinate: Rectangular) -&gt; Rectangular:\n    return coordinate\n\n@dispatch\ndef rectangular(coordinate: Polar) -&gt; Rectangular:\n    # We've moved this import from the top-level module to within this function! \n    from numpy import sin, cos \n    return Rectangular(\n        x = coordinate.r * cos(coordinate.θ),\n        y = coordinate.r * sin(coordinate.θ),\n    )\n\n@dispatch\ndef polar(coordinate: Rectangular) -&gt; Polar:\n    # We've moved this import from the top-level module to within this function! \n    from numpy import sqrt, arctan2 as atan2\n    return Polar(\n        r = sqrt(coordinate.x**2 + coordinate.y**2),\n        θ = atan2(-coordinate.y, coordinate.x),\n    )\n\n@dispatch\ndef polar(coordinate: Polar) -&gt; Polar:\n    return coordinate\n\n\n\n\nDelete Private Names\nNow your module definition is coming to a close! You’re done implementing all of the features of your project, and you’re about to type if __name__ == \"__main__\". What I’m proposing, with this whole blog post, is this: don’t stop there! Add an else condition to that if statement!\nIf your module is not the top-level program (known as “main”), then you should clean up all of your non-exported names with the pattern below! You need to put this pattern under an else condition (or a __name__ != \"__main__\" condition) because Python interpreters, like IPython, stick “magic” global variables in the top-level namespace. You don’t want to delete those!\n\n\nCode\nif __name__ != \"__main__\":\n    for _ in (*locals(), \"_\"):\n        if not _.startswith(\"__\") and _ not in __export__:\n            del locals()[_]"
  },
  {
    "objectID": "blog/posts/python-module-hygiene/index.html#closing",
    "href": "blog/posts/python-module-hygiene/index.html#closing",
    "title": "Module Hygiene in Python",
    "section": "Closing",
    "text": "Closing\nThis all might seem a bit strange, but I really like this design pattern. When writing code in this way, I find I’m constantly thinking about the required lifetime of each name I introduce. For simplicity’s sake, there’s a strong argument in favor of keeping each name for the shortest possible lifetime. Following this advice to its conclusion results in Python modules which are sparse, simple for users to interact with and understand, and which have clearly separated import-time and usage-time dependencies.\nCheck out my open-source Python package, module-hygiene, which implements the recipe described in this post!"
  },
  {
    "objectID": "blog/posts/skipping-entry/index.html",
    "href": "blog/posts/skipping-entry/index.html",
    "title": "Skip-Entry Dynamics",
    "section": "",
    "text": "The content here was originally written as part of a problem set assigned in a graduate launch and entry vehicle design course at the University of Maryland. The problem statement was flawed. I believe this was deliberate — either way, the assignment was a brilliant educational tool. I’m thankful for that slight falsehood; it cemented my early understanding of spacecraft entry dynamics, and has motivated this whole post."
  },
  {
    "objectID": "blog/posts/skipping-entry/index.html#artemis-1",
    "href": "blog/posts/skipping-entry/index.html#artemis-1",
    "title": "Skip-Entry Dynamics",
    "section": "Artemis 1",
    "text": "Artemis 1\nGo Artemis! NASA’s first Artemis mission launched successfully in the earliest hours of November 16th, 2022. Artemis 1 was an uncrewed flight test — the Orion spacecraft flew to the moon, arrived in a special kind of stable orbit called a Distant Retrograde Orbit. Of course, NASA’s flight operators in Mission Control captured stunning pictures along the way. A visual overview for Artemis 1 is shown in Figure 1.\nArtemis 1 is record breaking through its furthest achieved distance from Earth, and through one of its most important test objectives — the first successfully test of a skip-entry for a human-rated spacecraft. Orion’s heatshield was tested successfully when it entered Earth atmosphere on December 11th, 2022.\n\n\n\n\n\n\n\nFigure 1: Artemis 1 Mission Architecture"
  },
  {
    "objectID": "blog/posts/skipping-entry/index.html#atmospheric-entry",
    "href": "blog/posts/skipping-entry/index.html#atmospheric-entry",
    "title": "Skip-Entry Dynamics",
    "section": "Atmospheric Entry",
    "text": "Atmospheric Entry\nTesting a new spacecraft’s capability to safely enter Earth’s atmosphere is incredibly important. If a spacecraft is to return to Earth in-tact, it has to survive the fall through Earth’s atmosphere. Returning spacecraft are hurtling through space at tens of thousands of miles per hour; as the spacecraft collide with air particles at high speeds, an enormous amount of heat is generated. To withstand the heat of entering a planet’s atmosphere from space, spacecraft commonly have a thick metal component which is oriented towards the atmosphere for the duration of the atmospheric entry. This metal hardware is referred to as a heat shield. Artemis 2 will fly four astronauts to a lunar orbit before returning back to Earth. A successful atmospheric entry in Artemis 1 will prove the Orion spacecraft capable of safely returning astronauts back to Earth in Artemis 2, and future Artemis missions.\nThe angle of a spacecraft’s flight into Earth’s atmosphere (mostly) determines the kind of atmospheric entry: ballistic, lifting, or skipping. A steep entry will cause the spacecraft to cannonball through Earth’s atmosphere; if we model this scenario while ignoring the force of gravity on the spacecraft, the spacecraft’s trajectory is ballistic. A slightly less steep entry will allow the atmosphere to lift the spacecraft as it descends; this force exerted by the atmosphere on the spacecraft is similar to how airplanes fly, and this flavor of atmospheric entry is known as lifting entry. Finally, entering the atmosphere at a shallow angle will cause the spacecraft to skip across the atmosphere like a rock on a pond; this is known as a skipping entry.\nNo human-rated vehicle as ever completed a skip-entry before Artemis 1. Orion is the first! There are many benefits to skip-entries, including lower accelerations experienced by astronauts, more precise landing targets, and lower temperatures on the heat shield. While the benefits of skip-entries are real, all atmospheric entries are incredibly sensitive. Enter the atmosphere at too steep an angle, and the spacecraft will burn up in the atmosphere. Enter the atmosphere at too shallow an angle, and the spacecraft will skip too far and fly out into space, never to return. Rigorous calculations must be made to ensure the spacecraft is entering the atmosphere at the right angle, and the right speed. With a few simplifying assumptions, the math behind atmospheric entry can be simple enough to fit in a blog post! Don’t believe me? Read on!"
  },
  {
    "objectID": "blog/posts/skipping-entry/index.html#entry-dynamics",
    "href": "blog/posts/skipping-entry/index.html#entry-dynamics",
    "title": "Skip-Entry Dynamics",
    "section": "Entry Dynamics",
    "text": "Entry Dynamics\nWe can simulate the Orion spacecraft’s trajectory through the atmosphere with just a couple dozen lines of code! To build a semi-accurate model for how a spacecraft enters Earth’s atmosphere, we’ll need to simplify the problem by make some assumptions. For example, let’s completely ignore winds! We should also ignore parachutes — we will just assume parachutes deploy successfully at some altitude. Let’s pretend the Orion spacecraft is completely rigid by ignoring the possibility of any bending or flexing in the structure that could affect the aerodynamics throughout entry. Also, we are leaving out all considerations related to heat! No thermodynamic modeling in this post. We will assume the heat shield is capable of handling any entry we throw at it.\n\n\n\n\n\n\nThe word model might seem a bit abstract. What does a model look like? A model can be thought of as the combination of two things: simplifying assumptions, and equations which rely on the simplifying assumptions. So all we need to build a model is to list the assumptions we make, and use those assumptions to write equations. Hey! That’s only two things!\n\n\n\nThere are many other assumptions we’re making implicitly in this problem. While we can’t possibly list them all, let’s go into some more depth for a couple of the most important assumptions our model will rely on.\n\nExponential Atmosphere\nEarth’s atmosphere will exert aerodynamic forces on the Orion spacecraft. If we ignore wind, these aerodynamic forces will depend on some aerodynamic coefficients, the spacecraft’s airspeed and orientation, as well as the density of the atmosphere. This atmospheric density will vary with altitude! We can create a very simple model for Earth’s atmosphere by assuming the density decays exponentially as altitude increases. The core equation for \\(\\rho\\), the atmospheric density, will depend on altitude above sea level \\(h\\), the atmospheric density at sea level \\(\\rho_0\\), and a scaling factor \\(h_s\\) which is unique to each planet. For Earth, an accurate scaling factoris approximately equal to \\(7524\\) meters.\n\\[\n\\rho = \\rho_0 e^\\frac{-h}{h_s}\n\\tag{1}\\]\n\n\nAerodynamic Coefficients\nThe aerodynamic forces on Orion can be summarized by a few aerodynamic coefficients: the ballistic coefficient \\(\\beta\\), the coefficient of drag \\(C_D\\), and the lifting coefficient \\(C_L\\). The coefficients of lift and drag are commonly combined into one value: the lift to drag ratio \\(C_R\\). For this post, one value for Orion’s \\(C_R\\) will be assumed. The ballistic coefficient can be calculated using the vehicle’s mass, lift to drag ratio, and the surface area of the heat shield, as shown in Equation 3.\n\\[\nC_R = \\frac{C_L}{C_D}\n\\tag{2}\\]\n\\[\n\\beta = \\frac{m}{C_R A_s}\n\\tag{3}\\]\nCode which calculates the ballistic coefficient, and other calculations relevant to atmospheric entry dynamics, is provided below.\n\n\nCode\n\"\"\"\nCalculate the ballistic coefficient, β.\n\"\"\"\nballistic_coefficient(m, Cᵣ, Aₛ) = m / (Cᵣ * Aₛ)\n\n\"\"\"\nCalculate the derivative of the downrange distance, ḋ.\n\"\"\"\ndownrange_velocity(ν, γ) = ν * cos(γ)\n\n\"\"\"\nCalculate the terminal velocity, vₜ.\n\"\"\"\nterminal_velocity(g, β, ρ, γ) = √(-2g * β * sin(γ) / ρ)\n\n\"\"\"\nCalculate the maximum deceleration, nₘ.\n\"\"\"\nmaximum_deceleration(vₑ, γ, hₛ, e) = (vₑ^2 / hₛ) * (sin(γ) / 2e)\n\n\n\n\nEquations of Motion\nWith all of the assumptions described above, we can write the equations of motion for a spacecraft as it flies through a planet’s atmosphere. The equations shown through math and code below describe how four specific values change with time as the spacecraft flies: the angle of the spacecraft’s velocity with respect to the spacecraft’s horizontal axis \\(\\gamma\\), the airspeed \\(v\\), the distance to Earth’s center \\(r\\), and the angle of the spacecraft’s position with respect to the horizontal along the Earth’s center \\(\\theta\\). Please accept these equations as “given” for now. Check back later and there might be an expanded explanation posted as an update!\n\\[\n\\begin{align}\n  \\dot{\\gamma} &= \\frac{1}{v} \\left( L_m - (1 - \\frac{v^2}{v_c^2}) g \\cos{\\gamma} \\right) \\\\\n  \\dot{v} &= -D_m - g \\sin{\\gamma} \\\\\n  \\dot{r} &= v \\sin{\\gamma} \\\\\n  \\dot{\\theta} &= \\frac{v}{r} \\cos{\\gamma} \\\\\n\\end{align}\n\\tag{4}\\]\nThe code below defines a function, CanonicalEntry, which produces the equations of motion for a spacecraft’s atmospheric entry along a plane in code.\n\n\nCode\nusing Memoize: @memoize\nusing Symbolics, ModelingToolkit\nusing PhysicalConstants.CODATA2018: NewtonianConstantOfGravitation as G₀\n\n\"\"\"\nConstruct a model for entry dynamics.\n\"\"\"\n@memoize function CanonicalEntry(; name=:CanonicalEntry, simplify=true)\n\n    @variables t\n\n    x = @variables γ(t) v(t) r(t) θ(t)\n    p = @parameters r₀ ρ₀ hₛ β Cᵣ μ\n    δ = Differential(t)\n\n    vc = √(μ / r)\n    g₀ = μ / r₀^2\n    g = g₀ * (r₀ / r)^2\n    h = r - r₀\n    ρ = ρ₀ * exp(-h / hₛ)\n    Dₘ = (ρ / 2) * v^2 / β\n    Lₘ = Cᵣ / Dₘ\n\n    eqs = [\n        δ(γ) ~ (1 / v) * (Lₘ - (1 - (v / vc)^2) * g * cos(γ)),\n        δ(v) ~ -Dₘ - g * sin(γ),\n        δ(r) ~ v * sin(γ),\n        δ(θ) ~ (v / r) * cos(γ)\n    ]\n\n    if simplify\n        map!(ModelingToolkit.simplify, eqs, eqs)\n    end\n\n    model = ODESystem(\n        eqs, t; name=name\n    )\n\n    return model\n\nend\n\n\nCalling CanonicalEntry produces a model object, which we can inspect for the equations of motion written mathematically. This expands all of the equations; the output looks a lot more complicated than Equation 4! Thank goodness for computers.\n\n\nCode\nmodel = CanonicalEntry()\nmodel |&gt; equations .|&gt; ModelingToolkit.simplify\n\n\n\\[ \\begin{align}\n\\frac{\\mathrm{d} \\gamma\\left( t \\right)}{\\mathrm{d}t} =& \\frac{2 \\left( \\sqrt{\\frac{\\mu}{r\\left( t \\right)}} \\right)^{2} \\left( r\\left( t \\right) \\right)^{2} C_r \\beta + \\left( v\\left( t \\right) \\right)^{4} \\mu \\rho_0 e^{\\frac{r_0 - r\\left( t \\right)}{h_s}} \\cos\\left( \\gamma\\left( t \\right) \\right) - \\left( \\sqrt{\\frac{\\mu}{r\\left( t \\right)}} \\right)^{2} \\left( v\\left( t \\right) \\right)^{2} \\mu \\rho_0 e^{\\frac{r_0 - r\\left( t \\right)}{h_s}} \\cos\\left( \\gamma\\left( t \\right) \\right)}{\\left( \\sqrt{\\frac{\\mu}{r\\left( t \\right)}} \\right)^{2} \\left( v\\left( t \\right) \\right)^{3} \\left( r\\left( t \\right) \\right)^{2} \\rho_0 e^{\\frac{r_0 - r\\left( t \\right)}{h_s}}} \\\\\n\\frac{\\mathrm{d} v\\left( t \\right)}{\\mathrm{d}t} =& \\frac{ - \\beta \\mu \\sin\\left( \\gamma\\left( t \\right) \\right) - \\frac{1}{2} \\left( v\\left( t \\right) \\right)^{2} \\left( r\\left( t \\right) \\right)^{2} \\rho_0 e^{\\frac{r_0 - r\\left( t \\right)}{h_s}}}{\\left( r\\left( t \\right) \\right)^{2} \\beta} \\\\\n\\frac{\\mathrm{d} r\\left( t \\right)}{\\mathrm{d}t} =& v\\left( t \\right) \\sin\\left( \\gamma\\left( t \\right) \\right) \\\\\n\\frac{\\mathrm{d} \\theta\\left( t \\right)}{\\mathrm{d}t} =& \\frac{v\\left( t \\right) \\cos\\left( \\gamma\\left( t \\right) \\right)}{r\\left( t \\right)}\n\\end{align}\n\\]"
  },
  {
    "objectID": "blog/posts/skipping-entry/index.html#simulated-skip-entry",
    "href": "blog/posts/skipping-entry/index.html#simulated-skip-entry",
    "title": "Skip-Entry Dynamics",
    "section": "Simulated Skip-Entry",
    "text": "Simulated Skip-Entry\n\nBackstory\nIn 2020, I took a graduate Launch & Entry Vehicle Design course at the University of Maryland. The course was taught by Dr. Akin, and one of our homework assignments was to simulate a lifting entry for the Orion spacecraft. One of my classmates and I easily spent 20+ hours trying to make the simulation work, but no matter what we tried, the simulated entry did not seem to be a lifting entry. We turned in the assignment the day it was due, and hoped for grading mercy — which we received, thankfully! Dr. Akin apologized when we turned it in — he had said lifting entry, but really the initial conditions he gave us instead produced a skip entry! I forgot all about this for months, until I reviewed recorded lecture videos from a previous year of the course while preparing for an exam. I came across a lecture from years earlier, where my professor gave the same apology to that class!\nI don’t mean to make any accusations, but I suspect that mix-up was intentional! Regardless of the intent, the effect was brilliant. I’ve never forgotten those couple of lectures introducing atmospheric entry. Plus, the assignment motivated a fun blog post!\n\n\nInitial Conditions\nTo simulate Orion’s skip-entry, we need initial conditions. Let’s assume the initial conditions provided in Table 1. We can “plug” these conditions into the dynamics described previously to simulate an atmospheric skipping entry!\n\n\nTable 1: Initial Conditions for Skip Entry\n\n\n\n\n\n\n\n\nSymbol\nDescription\nValue\nUnits\n\n\n\n\n\\(m\\)\nOrion Mass\n\\(10,400\\)\nkilograms\n\n\n\\(A_s\\)\nHeatshield Surface Area\n\\(19.635\\)\nsquare meters\n\n\n\\(C_R\\)\nLift to Drag Ratio\n\\(0.25\\)\nmeter squared per quartic second\n\n\n\\(\\beta\\)\nBallistic Coefficient\n\\(441.39\\)\nkilograms per meter squared\n\n\n\\(\\rho_0\\)\nAtmospheric Density at Sea Level\n\\(1.226\\)\nkilograms per meter cubed\n\n\n\\(h_s\\)\nAtmospheric Scaling Factor\n\\(7524\\)\nmeters\n\n\n\\(\\mu\\)\nEarth’s Mass Parameter\n\\(3.986 \\times 10^14\\)\nmeters per second cubed\n\n\n\\(r_0\\)\nEarth’s Radius\n\\(6378\\)\nkilometers\n\n\n\\(\\gamma\\)\nEntry Flight Path Angle\n\\(-5^\\circ\\)\ndegrees\n\n\n\\(v\\)\nEntry Velocity\n\\(8.939\\)\nkilometers per second\n\n\n\\(r\\)\nEntry Radius\n\\(6500.1\\)\nkilometers\n\n\n\\(\\theta\\)\nEntry Angular Position\n\\(349.3^\\circ\\)\ndegrees\n\n\n\n\n\n\n\n\n\n\nAn earlier version of this post used a flight path angle of \\(-2.5^\\circ\\). This was the value assigned for the problem set, and it produced results which were highly sensitive to solver tolerances. Setting the absolute and relative tolerances below 1e-9 caused the spacecraft to “skip” for over one full day! The current flight path angle value, \\(-5^\\circ\\), produces plots which better represent atmospheric skip-entry dynamics.\n\n\n\n\n\nSimulation\nFinally — let’s simulate Orion’s entry into Earth’s atmosphere!\n\n\nCode\nusing Plots\nusing Unitful\nusing DifferentialEquations\n\ntime = NaN # the time does not matter!\n\nm = 10.4e3u\"kg\"\nA = 19.635u\"m^2\"\nC = 0.25u\"m^2/s^4\"\nβ = 441.39u\"kg/m^2\"\nρ = 1.226u\"kg/m^3\"\nh = 7524.0u\"m\"\nμ = 3.986e14u\"m^3/s^2\"\nR = 6378u\"km\"\nγ = -5.0u\"°\"\nv = 8.939u\"km/s\"\nr = 6500.1u\"km\"\nθ = 349.3u\"°\"\n\nstates = @nonamespace [\n    model.γ =&gt; ustrip(upreferred(γ)),\n    model.v =&gt; ustrip(upreferred(v)),\n    model.r =&gt; ustrip(upreferred(r)),\n    model.θ =&gt; ustrip(upreferred(θ)),\n]\n\nparameters = @nonamespace [\n    model.Cᵣ =&gt; ustrip(upreferred(C)),\n    model.r₀ =&gt; ustrip(upreferred(R)),\n    model.hₛ =&gt; ustrip(upreferred(h)),\n    model.μ =&gt; ustrip(upreferred(μ)),\n    model.ρ₀ =&gt; ustrip(upreferred(ρ)),\n    model.β =&gt; ustrip(upreferred(β)),\n]\n\nsealevel(u, t, integrator) = u[3] - ustrip(upreferred(R))\nimpact = ContinuousCallback(sealevel, terminate!)\n\ntimespan = (0.0, 24 * 60 * 60 * 7)\nproblem = ODEProblem(model, states, timespan, parameters)\n\ntrajectory = solve(problem; callback=impact, abstol=1e-14, reltol=1e-14)\n\n\nLet’s plot the spacecraft’s altitude across time. Do you see the altitude jump before Orion finally descends to the Earth’s surface? That’s the spacecraft skipping across the atmosphere — just like a rock skips across a pond, if the rock was moving at tens of thousands of miles per hour.\n\n\nCode\naltitude = map(\n    u -&gt; ustrip(u\"km\", u[3] * u\"m\" - R),\n    trajectory.u,\n)\n\nlinear = plot(\n    trajectory.t, altitude;\n    title=\"Orion's Altitude Throughout (Re)Entry\",\n    label=\"h(t)\",\n    xlabel=\"Time (seconds)\",\n    ylabel=\"Altitude (km)\"\n)\n\n\n\n\n\nSpacecraft Altitude Across Time\n\n\n\n\nWe can also plot the altitude alongside the angle of the spacecraft’s trajectory with respect to an arbitrary horizontal axis across Eath. The result depicts the spacecraft’s orbit about Earth!\n\n\nCode\nangle = map(\n    u -&gt; rad2deg(u[4]),\n    trajectory.u,\n)\n\npolar = plot(\n    angle, altitude;\n    proj=:polar,\n    title=\"Orion's Orbit About Earth\",\n    label=\"h(t)\",\n    xlabel=\"Time (seconds)\",\n    ylabel=\"Altitude (km)\"\n)\n\n\n\n\n\nSpacecraft Altitude Across Angular Position\n\n\n\n\nThis is a really fun exercise. By breaking the problem down to first-principles, we can predict the behavior of a really complicated system. Thanks to Dr. Akin for assigning this problem over two years ago, and thanks to my friend and classmate Kate for banging her head against the wall with me to figure this out. Finally, thanks to you for reading!"
  },
  {
    "objectID": "blog/posts/jpl-horizons-scripts/index.html",
    "href": "blog/posts/jpl-horizons-scripts/index.html",
    "title": "HORIZONS Scripting Interface",
    "section": "",
    "text": "This tutorial describes an indefinitely supported, yet obselete automated command-line interface to the JPL HORIZONS system. The recommended methods for automatically downloading JPL HORIZONS ephemeris data is the graphical interface, or the new REST API."
  },
  {
    "objectID": "blog/posts/jpl-horizons-scripts/index.html#overview",
    "href": "blog/posts/jpl-horizons-scripts/index.html#overview",
    "title": "HORIZONS Scripting Interface",
    "section": "Overview",
    "text": "Overview\nNASA provides fantastic tools that are available for personal use – one such tool is NASA JPL’s HORIZONS. HORIZONS allows users to request positions, velocities, and physical attributes for thousands of bodies in our solar system. Users can request celestial body positions and velocities (often referred to as ephemeris) for several time steps. These orbital states are very accurately modeled! Ephemeris models often include relativistic effects, solar radiation pressure, aspherical bodies, and more. After receiving a grid of orbital states from HORIZONS, a user can interpolate between timesteps to find precise orbital states at any time.\nHORIZONS has a web interface, and email and Telnet interfaces. While the web interface is simple to use, it does not provide every capability offered by the email and Telnet interfaces. If you just want one ephemeris file for a specific use case, the web interface is probably ideal! While I’ve never used the email interface, I have used the Telnet interface – the Telnet interface can be invoked by entering telnet://horizons.jpl.nasa.gov:6775 in a terminal of your choice. Otherwise, if you want to batch-request many ephemeris files, read on for a walkthrough for requesting ephemeris files from HORIZONS within a terminal, without manually walking through the Telnet interface!"
  },
  {
    "objectID": "blog/posts/jpl-horizons-scripts/index.html#procedure",
    "href": "blog/posts/jpl-horizons-scripts/index.html#procedure",
    "title": "HORIZONS Scripting Interface",
    "section": "Procedure",
    "text": "Procedure\nRather than manually entering your desired ephemeris file attributes through HORIZONS’ web or Telnet interfaces, NASA JPL has provided open-source scripts for automatically fetching ephemeris data from JPL servers. The steps below provide all the information you need to use these scripts, and wrap them with a simple .sh script for ease of use.\nNote that the rest of this walkthrough requires you use a terminal within a Unix-like system. If you want to use a Windows machine, consider using the Windows Subsystem for Linux.\nIf you follow the directions in this walkthrough verbatim, you’ll fetch a CSV-formatted ephemeris file without any text labels, with columns (from left to right): Julian day, X Position (km), Y Position (km), Z Position (km), X Velocity (km/s), Y Velocity (km/s), Z Velocity (km/s).\n\nInstall Dependencies\nJPL’s scripts use expect, an automation tool, to interact with the HORIZONS Telnet interface (so you don’t have to). You will need both expect and telnet installed on your system. JPL’s output ephemeris files contain carriage return characters that are not expected by Unix-like systems. You can install and use sponge (often packaged with moreutils), as shown below, to help remove these carriage returns, and other extraneous information from the data files returned by HORIZONS. If you only wish to remove the carriage return characters, you can also simply open the output ephemeris file in VSCode – this will re-format the file for your operating system.\nInstalling Dependencies on MacOS:\n# Uses Homebrew, a MacOs package manager: https://brew.sh\nbrew install inetutils # provides telnet\nbrew install expect    \nbrew install moreutils # (optional) provides sponge\nInstalling Dependencies on Ubuntu:\n# Uses apt, the default Ubuntu package manager\nsudo apt install telnet\nsudo apt install expect\nsudo apt install moreutils # (optional) provides sponge\nInstallation on other systems (Debian, Arch, etc.) is likely very similar to the installation commands above.\n\n\nDownload JPL Scripts\nJPL HORIZONS maintains scripts which users interact with through the command-line. See the HORIZONS documentation, which states…\n\nThe command-line interface can be automated. However, this is no longer recommended given the APIs introduced in 2021. Deprecated example scripts may be found in the FTP directory and will be supported indefinately.\n\nThe script interface README offers information about the existing scripts. Download and read through this file before continuing!\n\n\n\n\n\n\nYou must verify you are permitted to download and use these scripts! Refer to the HORIZONS documentation, the command-line interface README, and the script contents to determine if your usage and context forbids you from using these resources. The remainder of this tutorial assumes the user has read these instructions, and has determined they meet the qualifications for downloading and using all HORIZONS resources.\n\n\n\nIf you determine you are permitted, download the vec_tbl and vec_tbl.inp from JPL’s servers. The latter sets input parameters for your requested ephemeris data, the former is the ultimate script users can call to get ephemeris data. Remember to read the HORIZONS documentation – usage may not be free for commercial use, and text in each script file may state that some users are not permitted to download and use the scripts.\nwget ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/vec_tbl\nwget ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/vec_tbl.inp\nWe’ll also need to make vec_tbl executable.\nchmod u+x vec_tbl\n\n\nSet Input Parameters\nThe input file, vec_tbl.inp, sets environment variables that vec_tbl uses to walk through the HORIZONS Telnet interface automatically. These parameters provide information like “where should the origin be placed” and “what time window, and what size timesteps should be returned”.\nEdit vec_tbl.inp with your desired ephemeris file parameters. Some helpful parameter values are provided below – these parameters will result in an ephemeris format with the following attributes:\n\nOrigin placed at solar system barycenter\nCSV output with Cartesian coordinates\nTime window from 2020 to 2070, with 6-hour increments\nNo text labels in the CSV data\n\nNote – you can replace @ssb with @sun to place the origin of the ephemeris data at the Sun’s center of mass.\nset   EMAIL_ADDR    \"your_email_address@aol.net\" ;\nset   CENTER        \"@ssb\"                       ;\nset   REF_PLANE     \"FRAME\"                      ;\nset   START_TIME    \"2020-Jan-1\"                 ;\nset   STOP_TIME     \"2070-Jan-1\"                 ;\nset   STEP_SIZE     \"6h\"                         ;\nset   CSV_FORMAT    \"YES\"                        ;\nset   VEC_TABLE     \"2\"                          ;\nset   REF_SYSTEM    \"J2000\"                      ;\nset   VEC_CORR      \"1\"                          ;\nset   OUT_UNITS     \"1\"                          ;\nset   CSV_FORMAT    \"YES\"                        ;\nset   VEC_LABELS    \"NO\"                         ;\nset   VEC_DELTA_T   \"NO\"                         ;\nset   VEC_TABLE     \"2\"                          ;\n\n\nFetch Ephemeris Data\nNow we can use vec_tbl to download Ephemeris data for any celestial body tracked by HORIZONS. The usage for vec_tbl is shown below.\n./vec_tbl &lt;BODY_ID&gt; &lt;OUTPUT_FILENAME&gt;\nThe second argument is the NAIF ID for the celestial body you’d like to track. IDs for common solar system bodies are provided in the table below.\n\n\n\nSolar System Body\nNAIF ID\n\n\n\n\nMercury Barycenter\n1\n\n\nVenus Barycenter\n2\n\n\nEarth-Moon Barycenter\n3\n\n\nMars Barycenter\n4\n\n\nJupiter Barycenter\n5\n\n\nSaturn Barycenter\n6\n\n\nUranus Barycenter\n7\n\n\nNeptune Barycenter\n8\n\n\nPluto Barycenter\n9\n\n\nSun\n10\n\n\nMercury\n199\n\n\nVenus\n299\n\n\nMoon\n301\n\n\nEarth\n399\n\n\nMars\n499\n\n\nJupiter\n599\n\n\nSaturn\n699\n\n\nUranus\n799\n\n\nNeptune\n899\n\n\nPluto\n999\n\n\n\nNote the output file will have a preamble, which includes physical characteristics of your selected celestial body, and other information.\n\n\nRe-format Ephemeris Data (optional)\nThe output format of the Ephemeris file will depend on your input parameters provided in vec_tbl.inp. If you’re following this walk-through verbatim (aka using the input parameters provided above), then your output file will have 7 columns: Julian day, date-time label, X, Y, Z positions, X, Y, Z velocities. All columns are numeric, with the exception of column 2 – this makes loading data into MATLAB, Python, or Julia a bit more complicated. We don’t need column 2 to interpolate between Cartesian states, because column 2 is simply a plain-language description of the Julian Day value in column 1. We can use sed and awk magic to strip out the second column, and remove the preamble from the Ephemeris file. The sed and awk commands below are taken directly from the two StackOverflow answers: sed reference, awk reference. Remember to replace &lt;FILE&gt; with your desired output file name!\n# Filter out data-file preamble\nsed -n '/\\$\\$SOE/,/\\$\\$EOE/{//!p;}' &lt;FILE&gt; | sponge &lt;FILE&gt; \n\n# Remove second column (data-time label)\nawk -F , 'BEGIN {OFS=FS}  {$2=\"\"; sub(\",,\", \",\"); print}' &lt;FILE&gt; | sponge &lt;FILE&gt; \nNow your file will have only comma-delimited rows of numbers!"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "write(loopy.software)",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nSkip-Entry Dynamics\n\n\n\n\n\nExploring skip-entry dynamics in celebration of Artemis 1!\n\n\n\n\n\n\nDec 11, 2022\n\n\n15 min\n\n\n\n\n\n\n  \n\n\n\n\nWrongful Partisanship\n\n\n\n\n\nThe actions taken by Houston Police at the Commissioners Court were antidemocratic.\n\n\n\n\n\n\nOct 17, 2022\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nModule Hygiene in Python\n\n\n\n\n\nWe can and should do more to clean up our Python namespaces!\n\n\n\n\n\n\nAug 27, 2022\n\n\n10 min\n\n\n\n\n\n\n  \n\n\n\n\nHORIZONS Scripting Interface\n\n\n\n\n\nHow to fetch solar system ephemeris data for free!\n\n\n\n\n\n\nOct 26, 2021\n\n\n10 min\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to Dynamics\n\n\n\n\n\nAn introduction to dynamics through scientific software.\n\n\n\n\n\n\nJul 4, 2021\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "packages/index.html",
    "href": "packages/index.html",
    "title": "package(loopy.software)",
    "section": "",
    "text": "AstrodynamicalModels.jl\n\n\n\nJulia\n\n\nModeling\n\n\nAstrodynamics\n\n\n\nConstruct models commonly used in astrodynamics.\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeneralAstrodynamics.jl\n\n\n\nJulia\n\n\nDynamics\n\n\nAstrodynamics\n\n\n\nGeneral calculations, and iterative solvers, within astrodynamics!\n\n\n\n\n\n\n\n\n\n\n\n\n\nHorizonsAPI.jl\n\n\n\nJulia\n\n\nEphemeris\n\n\nAstrodynamics\n\n\n\nQuery NASA JPL’s HORIZONS interface with Julia!\n\n\n\n\n\n\n\n\n\n\n\n\n\nHorizonsEphemeris.jl\n\n\n\nJulia\n\n\nEphemeris\n\n\nAstrodynamics\n\n\n\nFetch ephemeris data from NASA’s HORIZONS platform.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPolynomialGTM.jl\n\n\n\nJulia\n\n\nDynamics\n\n\nModeling\n\n\n\nPublicly available polynomial models for a model aircraft!\n\n\n\n\n\n\n\n\n\n\n\n\n\nblock-scopes\n\n\n\nPython\n\n\nCursed\n\n\nScoping\n\n\n\nBlock scoping in Python!\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule-hygiene\n\n\n\nPython\n\n\nCursed\n\n\nScoping\n\n\n\nLike the __all__ variable, but more strict!\n\n\n\n\n\n\n\n\n\n\n\n\n\nrich-admonitions\n\n\n\nPython\n\n\nStyling\n\n\nTerminal\n\n\n\nMarkdown-style admonitions in Python, thanks to rich!\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "packages/foss/PolynomialGTM.jl/index.html",
    "href": "packages/foss/PolynomialGTM.jl/index.html",
    "title": "PolynomialGTM.jl",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nPolynomialGTM.jl!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://docs.loopy.software/PolynomialGTM.jl to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/HorizonsEphemeris.jl/index.html",
    "href": "packages/foss/HorizonsEphemeris.jl/index.html",
    "title": "HorizonsEphemeris.jl",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nHorizonsEphemeris.jl!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://docs.loopy.software/HorizonsEphemeris.jl to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/HorizonsAPI.jl/index.html",
    "href": "packages/foss/HorizonsAPI.jl/index.html",
    "title": "HorizonsAPI.jl",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nHorizonsAPI.jl!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://docs.loopy.software/HorizonsAPI.jl to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/block-scopes/index.html",
    "href": "packages/foss/block-scopes/index.html",
    "title": "block-scopes",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nblock-scopes!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://github.com/cadojo/block-scopes/blob/main/README.md to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/GeneralAstrodynamics.jl/index.html",
    "href": "packages/foss/GeneralAstrodynamics.jl/index.html",
    "title": "GeneralAstrodynamics.jl",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nGeneralAstrodynamics.jl!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://docs.loopy.software/GeneralAstrodynamics.jl to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/module-hygiene/index.html",
    "href": "packages/foss/module-hygiene/index.html",
    "title": "module-hygiene",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nmodule-hygiene!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://github.com/cadojo/module-hygiene/blob/main/README.md to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/rich-admonitions/index.html",
    "href": "packages/foss/rich-admonitions/index.html",
    "title": "rich-admonitions",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nrich-admonitions!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://github.com/cadojo/rich-admonitions/blob/main/README.md to \nfind the content you came here for."
  },
  {
    "objectID": "packages/foss/AstrodynamicalModels.jl/index.html",
    "href": "packages/foss/AstrodynamicalModels.jl/index.html",
    "title": "AstrodynamicalModels.jl",
    "section": "",
    "text": "👋 This is not the droid you're looking for...\n\nThis page should automatically forward you to the documentation for \nAstrodynamicalModels.jl!\nIf you're seeing this page, that redirection probably didn't work. Consider \nopening an issue if the problem \npersists! In the meantime, head over to https://docs.loopy.software/AstrodynamicalModels.jl to \nfind the content you came here for."
  },
  {
    "objectID": "credits/index.html",
    "href": "credits/index.html",
    "title": "Credits",
    "section": "",
    "text": "This site is hosted with GitHub Pages. The source code is hosted on GitHub."
  },
  {
    "objectID": "credits/index.html#website-hosting",
    "href": "credits/index.html#website-hosting",
    "title": "Credits",
    "section": "",
    "text": "This site is hosted with GitHub Pages. The source code is hosted on GitHub."
  },
  {
    "objectID": "credits/index.html#website-development",
    "href": "credits/index.html#website-development",
    "title": "Credits",
    "section": "Website Development",
    "text": "Website Development\nA new and fantastic tool for literate programming, Quarto, is used to develop and render this site. The full website theme is built on top of Bootstrap; specifically, the Pulse Quarto Theme is used for this website."
  },
  {
    "objectID": "credits/index.html#fun-facts",
    "href": "credits/index.html#fun-facts",
    "title": "Credits",
    "section": "Fun Facts",
    "text": "Fun Facts\nNone of the fun facts shown on the site homepage are originally created by me! They are all from various sources on the internet. I’ll add proper citations soon!"
  },
  {
    "objectID": "credits/index.html#blog-subscription",
    "href": "credits/index.html#blog-subscription",
    "title": "Credits",
    "section": "Blog Subscription",
    "text": "Blog Subscription\nThe HTML, Javascript, and backend services used to provide email subscriptions to blog posts are all provided by Mailchimp Embedded Signup Forms!"
  }
]